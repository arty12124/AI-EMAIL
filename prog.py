import customtkinter as ctk
from tkinter import messagebox, filedialog
import smtplib
from email.message import EmailMessage
import imaplib
import email
import threading
import openai
import csv
import pandas as pd
from PIL import Image, ImageTk
import os
import json  
import re    

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
ctk.set_appearance_mode("System")      
ctk.set_default_color_theme("blue")    

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP/IMAP
SMTP_SERVER = 'smtp.gmail.com'
SMTP_PORT = 587
IMAP_SERVER = 'imap.gmail.com'

# –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ (–∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç: {"name": ..., "email": ...})
clients = []

# ========== –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ==========
SETTINGS_FILE = "settings.json"

def save_settings(email, password, openai_key):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (Email, –ü–∞—Ä–æ–ª—å/App Password, API Key) –≤ —Ñ–∞–π–ª settings.json."""
    data = {
        "email": email,
        "password": password,
        "openai_key": openai_key
    }
    try:
        with open(SETTINGS_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        messagebox.showinfo("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")

def load_settings(email_entry, pass_entry, api_entry):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ settings.json, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç,
    –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è Email, –ü–∞—Ä–æ–ª—å –∏ API Key."""
    if os.path.exists(SETTINGS_FILE):
        try:
            with open(SETTINGS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
            email_entry.delete(0, "end")
            email_entry.insert(0, data.get("email", ""))
            pass_entry.delete(0, "end")
            pass_entry.insert(0, data.get("password", ""))
            api_entry.delete(0, "end")
            api_entry.insert(0, data.get("openai_key", ""))
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")

# ========== –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ email ==========
def is_valid_email(email_str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ email —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–∞–∑–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É:
    - –ù–µ—Ç –ø—Ä–æ–±–µ–ª–æ–≤;
    - –ï—Å—Ç—å —Å–∏–º–≤–æ–ª "@" —Å –Ω–µ–ø—É—Å—Ç–æ–π —á–∞—Å—Ç—å—é –¥–æ –∏ –ø–æ—Å–ª–µ;
    - –ü–æ—Å–ª–µ —Å–∏–º–≤–æ–ª–∞ "@" –µ—Å—Ç—å —Ç–æ—á–∫–∞, –∏ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è –Ω–µ –ø—É—Å—Ç–æ–µ.
    """
    pattern = r"^[^@\s]+@[^@\s]+\.[^@\s]+$"
    return bool(re.match(pattern, email_str))

# ========== –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ==========
def send_email(to_email, subject, body, login_email, login_pass):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —á–µ—Ä–µ–∑ SMTP (Gmail –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)."""
    try:
        msg = EmailMessage()
        msg['Subject'] = subject
        msg['From'] = login_email
        msg['To'] = to_email
        msg.set_content(body)
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(login_email, login_pass)
            server.send_message(msg)
        return "–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}"

def check_and_reply(email_addr, password, api_key, log_box):
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –ø–æ—á—Ç–µ —á–µ—Ä–µ–∑ IMAP, –∏—â–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞,
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é OpenAI (gpt-3.5-turbo)."""
    try:
        add_log(log_box, "üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–µ...", "info")
        mail = imaplib.IMAP4_SSL(IMAP_SERVER)
        mail.login(email_addr, password)
        mail.select("inbox")
        status, messages = mail.search(None, 'UNSEEN')
        mail_ids = messages[0].split()
        if not mail_ids:
            add_log(log_box, "‚ÑπÔ∏è –ù–æ–≤—ã—Ö –ø–∏—Å–µ–º –Ω–µ—Ç.", "info")
            return
        openai.api_key = api_key
        for num in mail_ids:
            status, msg_data = mail.fetch(num, '(RFC822)')
            for response_part in msg_data:
                if isinstance(response_part, tuple):
                    msg = email.message_from_bytes(response_part[1])
                    sender = msg['from']
                    subject = msg['subject']
                    body = ""
                    if msg.is_multipart():
                        for part in msg.walk():
                            if part.get_content_type() == "text/plain":
                                body = part.get_payload(decode=True).decode()
                                break
                    else:
                        body = msg.get_payload(decode=True).decode()
                    add_log(log_box, f"üì© –ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç {sender} | –¢–µ–º–∞: {subject}", "email")
                    completion = openai.ChatCompletion.create(
                        model="gpt-3.5-turbo",
                        messages=[
                            {"role": "system", "content": "–¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ –ø–∏—Å—å–º–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤–µ–∂–ª–∏–≤–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ."},
                            {"role": "user", "content": body}
                        ]
                    )
                    reply_text = completion.choices[0].message.content
                    add_log(log_box, f"ü§ñ –û—Ç–≤–µ—Ç: {reply_text}", "reply")
                    send_email(sender, f"Re: {subject}", reply_text, email_addr, password)
                    add_log(log_box, f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {sender}", "success")
    except Exception as e:
        add_log(log_box, f"‚ùå –û—à–∏–±–∫–∞: {e}", "error")

def add_log(log_box, message, msg_type="info"):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ –ª–æ–≥ (—Å —Ä–∞–∑–Ω—ã–º —Ü–≤–µ—Ç–æ–º)."""
    log_box.configure(state="normal")
    colors = {
        "info": "#808080",
        "email": "#0078D7",
        "reply": "#107C10",
        "success": "#10893E",
        "error": "#E81123"
    }
    log_box.insert("end", f"{message}\n", msg_type)
    log_box.tag_config(msg_type, foreground=colors.get(msg_type, "#000000"))
    log_box.see("end")
    log_box.configure(state="disabled")

def import_clients(client_listbox):
    """–ò–º–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ CSV –∏–ª–∏ Excel.
    –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è email,
    –ø—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ –≤—Å–µ–º –∑–Ω–∞—á–µ–Ω–∏—è–º —Å—Ç—Ä–æ–∫–∏ –∏, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å —Å–∏–º–≤–æ–ª–æ–º '@',
    –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ email-–∞–¥—Ä–µ—Å.
    """
    file_path = filedialog.askopenfilename(filetypes=[("CSV/Excel files", "*.csv *.xlsx")])
    if not file_path:
        return
    try:
        clients.clear()
        client_listbox.delete("1.0", "end")
        if file_path.endswith(".csv"):
            with open(file_path, newline='', encoding='utf-8') as csvfile:
                reader = csv.DictReader(csvfile)
                for row in reader:
                    email_addr = row.get("email") or row.get("Email")
                    name = row.get("name") or row.get("Name") or "–ö–ª–∏–µ–Ω—Ç"
                    if not email_addr:
                        # –ü—Ä–æ–±–µ–≥–∞–µ–º –ø–æ –≤—Å–µ–º –∑–Ω–∞—á–µ–Ω–∏—è–º —Å—Ç—Ä–æ–∫–∏
                        for value in row.values():
                            if isinstance(value, str) and "@" in value:
                                email_addr = value.strip()
                                break
                    if email_addr:
                        clients.append({"name": name, "email": email_addr})
        elif file_path.endswith(".xlsx"):
            df = pd.read_excel(file_path)
            for _, row in df.iterrows():
                email_addr = row.get("email") or row.get("Email")
                name = row.get("name") or row.get("Name") or "–ö–ª–∏–µ–Ω—Ç"
                if pd.isna(email_addr) or not isinstance(email_addr, str):
                    for item in row:
                        if isinstance(item, str) and "@" in item:
                            email_addr = item.strip()
                            break
                if email_addr:
                    clients.append({"name": name, "email": email_addr})
        for c in clients:
            client_listbox.insert("end", f"{c['name']} <{c['email']}>\n")
        messagebox.showinfo("–ò–º–ø–æ—Ä—Ç", "–ö–ª–∏–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª: {e}")

def add_client_manually(client_listbox, entry):
    """–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –≤—Ä—É—á–Ω—É—é –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞, –ø—Ä–æ–≤–µ—Ä—è—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å email."""
    email_addr = entry.get().strip()
    if not email_addr:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email-–∞–¥—Ä–µ—Å.")
        return
    if not is_valid_email(email_addr):
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email-–∞–¥—Ä–µ—Å–∞.\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–¥—Ä–µ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç '@' –∏ –¥–æ–º–µ–Ω.")
        return
    clients.append({"name": "–†—É—á–Ω–æ–π –∫–ª–∏–µ–Ω—Ç", "email": email_addr})
    client_listbox.insert("end", f"–†—É—á–Ω–æ–π –∫–ª–∏–µ–Ω—Ç <{email_addr}>\n")
    entry.delete(0, "end")

def send_to_all(subject, body_template, login_email, login_pass, log_box):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –∏–∑ —Å–ø–∏—Å–∫–∞."""
    if not clients:
        add_log(log_box, "‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç! –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤—Ä—É—á–Ω—É—é.", "error")
        return
    if not subject.strip():
        add_log(log_box, "‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ç–µ–º–∞ –ø–∏—Å—å–º–∞!", "error")
        return
    if not body_template.strip():
        add_log(log_box, "‚ö†Ô∏è –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –ø—É—Å—Ç–æ–π!", "error")
        return
    add_log(log_box, "üì§ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É...", "info")
    for client in clients:
        personalized_body = body_template.replace("{name}", client["name"])
        result = send_email(client["email"], subject, personalized_body, login_email, login_pass)
        if "—É—Å–ø–µ—à–Ω–æ" in result:
            add_log(log_box, f"‚úÖ {client['name']} <{client['email']}>: {result}", "success")
        else:
            add_log(log_box, f"‚ùå {client['name']} <{client['email']}>: {result}", "error")
    add_log(log_box, "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", "success")

def toggle_password(entry, button):
    """–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞."""
    if entry.cget('show') == '‚Ä¢':
        entry.configure(show='')
        button.configure(text='üîí')
    else:
        entry.configure(show='‚Ä¢')
        button.configure(text='üëÅÔ∏è')

def save_template(subject_entry, body_entry):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞ (—Ç–µ–º—ã –∏ —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å—å–º–∞) –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª."""
    file_path = filedialog.asksaveasfilename(
        defaultextension=".txt",
        filetypes=[("Text files", "*.txt")],
        title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞"
    )
    if file_path:
        try:
            with open(file_path, 'w', encoding='utf-8') as file:
                file.write(f"SUBJECT: {subject_entry.get()}\n\n")
                file.write(body_entry.get("1.0", "end"))
            messagebox.showinfo("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", "–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω: {e}")

def load_template(subject_entry, body_entry):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞ (—Ç–µ–º—ã –∏ —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å—å–º–∞) –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞."""
    file_path = filedialog.askopenfilename(
        filetypes=[("Text files", "*.txt")],
        title="–ó–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞"
    )
    if file_path:
        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                content = file.readlines()
                if content and content[0].startswith("SUBJECT:"):
                    subject = content[0][8:].strip()
                    subject_entry.delete(0, "end")
                    subject_entry.insert(0, subject)
                    body = ''.join(content[2:])
                    body_entry.delete("1.0", "end")
                    body_entry.insert("1.0", body)
                else:
                    body = ''.join(content)
                    body_entry.delete("1.0", "end")
                    body_entry.insert("1.0", body)
            messagebox.showinfo("–ó–∞–≥—Ä—É–∑–∫–∞", "–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω: {e}")

def clear_log(log_box):
    """–û—á–∏—Å—Ç–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞."""
    log_box.configure(state="normal")
    log_box.delete("1.0", "end")
    log_box.configure(state="disabled")

def main_app():
    root = ctk.CTk()
    root.title("AI –ü–æ—á—Ç–æ–≤–∏–∫ Pro")
    root.geometry("900x750")
    root.resizable(False, False)  # –û–∫–Ω–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞

    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
    tabview = ctk.CTkTabview(root)
    tabview.pack(fill="both", expand=True, padx=10, pady=10)
    
    tab_main = tabview.add("üìß Email")
    tab_settings = tabview.add("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    tab_help = tabview.add("‚ùì –ü–æ–º–æ—â—å")
    
    # ====================== –í–ö–õ–ê–î–ö–ê EMAIL ======================
    left_frame = ctk.CTkFrame(tab_main)
    left_frame.pack(side="left", fill="both", expand=True, padx=5, pady=5)
    
    template_frame = ctk.CTkFrame(left_frame, fg_color="transparent", corner_radius=0, border_width=0)
    template_frame.pack(fill="x", padx=5, pady=5)
    
    email_template_label = ctk.CTkLabel(template_frame, text="–®–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞", font=("Arial", 16, "bold"))
    email_template_label.pack(pady=5)

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏
    template_btn_frame = ctk.CTkFrame(template_frame, fg_color="transparent", corner_radius=0, border_width=0)
    template_btn_frame.pack(fill="x", pady=5)
    
    save_template_btn = ctk.CTkButton(template_btn_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω", width=80)
    load_template_btn = ctk.CTkButton(template_btn_frame, text="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω", width=80)
    
    save_template_btn.grid(row=0, column=0, padx=5, pady=5)
    load_template_btn.grid(row=0, column=1, padx=5, pady=5)
    template_btn_frame.grid_columnconfigure(0, weight=1)
    template_btn_frame.grid_columnconfigure(1, weight=1)
    
    save_template_btn.configure(command=lambda: save_template(subject_entry, body_entry))
    load_template_btn.configure(command=lambda: load_template(subject_entry, body_entry))

    # –§–æ—Ä–º–∞ –ø–∏—Å—å–º–∞
    ctk.CTkLabel(template_frame, text="–¢–µ–º–∞ –ø–∏—Å—å–º–∞:").pack(anchor="w", padx=5, pady=(10, 2))
    subject_entry = ctk.CTkEntry(template_frame, placeholder_text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –ø–∏—Å—å–º–∞...")
    subject_entry.pack(fill="x", padx=5, pady=(0, 10))
    
    ctk.CTkLabel(template_frame, text="–¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ {name} –¥–ª—è –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞):").pack(anchor="w", padx=5, pady=(5, 2))
    body_entry = ctk.CTkTextbox(template_frame, height=200, text_color="#808080")
    body_entry.pack(fill="both", expand=True, padx=5, pady=(0, 10))
    
    # –ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
    clients_frame = ctk.CTkFrame(left_frame)
    clients_frame.pack(fill="both", expand=True, padx=5, pady=5)
    
    client_label = ctk.CTkLabel(clients_frame, text="–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤", font=("Arial", 16, "bold"))
    client_label.pack(pady=5)

    # –ö–Ω–æ–ø–∫–∞ –ò–º–ø–æ—Ä—Ç
    import_btn = ctk.CTkButton(clients_frame, text="üì• –ò–º–ø–æ—Ä—Ç –±–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ (CSV/Excel)",
                               command=lambda: import_clients(client_listbox))
    import_btn.pack(pady=5)

    # –§—Ä–µ–π–º –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—á—Ç—ã
    manual_add_frame = ctk.CTkFrame(clients_frame)
    manual_add_frame.pack(fill="x", padx=5, pady=(0, 5))
    
    manual_add_entry = ctk.CTkEntry(manual_add_frame, placeholder_text="–í–≤–µ–¥–∏—Ç–µ email...")
    manual_add_entry.pack(side="left", fill="x", expand=True, padx=(0,5))
    manual_add_btn = ctk.CTkButton(manual_add_frame, text="–î–æ–±–∞–≤–∏—Ç—å",
                                   command=lambda: add_client_manually(client_listbox, manual_add_entry))
    manual_add_btn.pack(side="left")

    # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
    client_listbox = ctk.CTkTextbox(clients_frame, height=150)
    client_listbox.pack(fill="both", expand=True, padx=5, pady=5)
    
    # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
    right_frame = ctk.CTkFrame(tab_main)
    right_frame.pack(side="right", fill="both", expand=True, padx=5, pady=5)
    
    log_frame = ctk.CTkFrame(right_frame)
    log_frame.pack(fill="both", expand=True, padx=5, pady=5)
    
    log_label = ctk.CTkLabel(log_frame, text="–ñ—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", font=("Arial", 16, "bold"))
    log_label.pack(pady=5)
    
    log_box = ctk.CTkTextbox(log_frame, height=300, wrap="word")
    log_box.pack(fill="both", expand=True, padx=5, pady=5)
    log_box.configure(state="disabled")
    
    log_buttons_frame = ctk.CTkFrame(log_frame)
    log_buttons_frame.pack(fill="x", padx=5, pady=5)
    clear_log_btn = ctk.CTkButton(log_buttons_frame, text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥", width=120,
                                  command=lambda: clear_log(log_box))
    clear_log_btn.pack(side="right", padx=5)
    
    actions_frame = ctk.CTkFrame(right_frame)
    actions_frame.pack(fill="x", padx=5, pady=5)
    
    actions_label = ctk.CTkLabel(actions_frame, text="–î–µ–π—Å—Ç–≤–∏—è", font=("Arial", 16, "bold"))
    actions_label.pack(pady=5)
    
    send_all_btn = ctk.CTkButton(actions_frame, text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –∏–∑ –±–∞–∑—ã", height=40,
                                 fg_color="#107C10", hover_color="#0E6E0E",
                                 command=lambda: send_to_all(
                                     subject_entry.get(),
                                     body_entry.get("1.0", "end"),
                                     email_entry.get(),
                                     pass_entry.get(),
                                     log_box
                                 ))
    send_all_btn.pack(fill="x", padx=20, pady=5)
    
    reply_btn = ctk.CTkButton(actions_frame, text="ü§ñ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞ (AI)", height=40,
                              fg_color="#0078D7", hover_color="#0063B1",
                              command=lambda: threading.Thread(
                                  target=check_and_reply,
                                  args=(email_entry.get(), pass_entry.get(), api_entry.get(), log_box)
                              ).start())
    reply_btn.pack(fill="x", padx=20, pady=5)
    
    # ====================== –í–ö–õ–ê–î–ö–ê –ù–ê–°–¢–†–û–ô–ö–ò ======================
    settings_frame = ctk.CTkFrame(tab_settings)
    settings_frame.pack(fill="both", expand=True, padx=30, pady=30)
    
    settings_label = ctk.CTkLabel(settings_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", font=("Arial", 20, "bold"))
    settings_label.pack(pady=15)
    
    # –í–∞—à Email
    ctk.CTkLabel(settings_frame, text="–í–∞—à Email:").pack(anchor="w", padx=20, pady=(10, 5))
    email_entry = ctk.CTkEntry(settings_frame, placeholder_text="example@gmail.com", width=400)
    email_entry.pack(padx=20, pady=(0, 15), fill="x")
    
    # –ü–∞—Ä–æ–ª—å (–∏–ª–∏ App Password)
    ctk.CTkLabel(settings_frame, text="–ü–∞—Ä–æ–ª—å (–∏–ª–∏ App Password):").pack(anchor="w", padx=20, pady=(0, 5))
    pass_container = ctk.CTkFrame(settings_frame, fg_color="transparent", corner_radius=0)
    pass_container.pack(fill="x", padx=20, pady=(0, 15))
    pass_entry = ctk.CTkEntry(pass_container, placeholder_text="–í–∞—à –ø–∞—Ä–æ–ª—å –∏–ª–∏ –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                              show="‚Ä¢", fg_color="transparent")
    pass_entry.pack(side="left", fill="x", expand=True)
    show_pass_btn = ctk.CTkButton(pass_container, text="üëÅÔ∏è", width=40,
                                  command=lambda: toggle_password(pass_entry, show_pass_btn))
    show_pass_btn.pack(side="left", padx=5)
    
    # OpenAI API Key
    ctk.CTkLabel(settings_frame, text="OpenAI API Key:").pack(anchor="w", padx=20, pady=(0, 5))
    api_container = ctk.CTkFrame(settings_frame, fg_color="transparent", corner_radius=0)
    api_container.pack(fill="x", padx=20, pady=(0, 15))
    api_entry = ctk.CTkEntry(api_container, placeholder_text="sk-...", show="‚Ä¢", fg_color="transparent")
    api_entry.pack(side="left", fill="x", expand=True)
    show_api_btn = ctk.CTkButton(api_container, text="üëÅÔ∏è", width=40,
                                 command=lambda: toggle_password(api_entry, show_api_btn))
    show_api_btn.pack(side="left", padx=5)
    
    # –°–µ–∫—Ü–∏—è "–í–Ω–µ—à–Ω–∏–π –≤–∏–¥" –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞
    
    # –ö–ù–û–ü–ö–ê "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç Email, –ü–∞—Ä–æ–ª—å, API-–∫–ª—é—á)
    save_data_btn = ctk.CTkButton(settings_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
                                  command=lambda: save_settings(
                                      email_entry.get(),
                                      pass_entry.get(),
                                      api_entry.get()
                                  ))
    save_data_btn.pack(pady=10)

    # –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    load_settings(email_entry, pass_entry, api_entry)

    # ====================== –í–ö–õ–ê–î–ö–ê –ü–û–ú–û–©–¨ ======================
    help_frame = ctk.CTkFrame(tab_help)
    help_frame.pack(fill="both", expand=True, padx=10, pady=10)
    
    help_label = ctk.CTkLabel(help_frame, text="–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", font=("Arial", 20, "bold"))
    help_label.pack(pady=15)
    
    help_text = ctk.CTkTextbox(help_frame, height=600)
    help_text.pack(fill="both", expand=True, padx=20, pady=10)
    
    help_content = """# AI –ü–æ—á—Ç–æ–≤–∏–∫ Pro - –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

## üìß –†–∞–±–æ—Ç–∞ —Å –ø–∏—Å—å–º–∞–º–∏
1. **–®–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞** - –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ–º—É –∏ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {name} –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞.
2. **–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤** - –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –±–∞–∑—É –∏–∑ CSV –∏–ª–∏ Excel —Ñ–∞–π–ª–∞ —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ "name" –∏ "email".
   –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–ª–µ "–í–≤–µ–¥–∏—Ç–µ email...".
3. **–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å–µ–º** - –ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –∏–∑ –±–∞–∑—ã" –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.

## ü§ñ AI-–æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–∏—Å—å–º–∞
1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–µ –∏ API –∫–ª—é—á OpenAI.
2. –ù–∞–∂–º–∏—Ç–µ "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞ (AI)" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.
3. –ë–æ—Ç –ø—Ä–æ—á–∏—Ç–∞–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞ –∏ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –Ω–∏—Ö —Å –ø–æ–º–æ—â—å—é –ò–ò.

## ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞
1. **Email –∏ –ø–∞—Ä–æ–ª—å** - –î–ª—è Gmail –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∞ –Ω–µ –æ–±—ã—á–Ω—ã–π –ø–∞—Ä–æ–ª—å (–æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ 2FA).
2. **API –∫–ª—é—á** - –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–ª—é—á OpenAI API.
3. **–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ** - –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ Email, –ø–∞—Ä–æ–ª—å –∏ API-–∫–ª—é—á –≤ —Ñ–∞–π–ª –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤.

## üìù –°–æ–≤–µ—Ç—ã
- –ü—Ä–∏ –æ—à–∏–±–∫–µ AUTHENTICATIONFAILED –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ Email/–ø–∞—Ä–æ–ª—è.
- –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —É—Å–ø–µ—à–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –ø–∏—Å–µ–º –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
- –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ª–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ç–ø—Ä–∞–≤–æ–∫.
"""
    help_text.insert("1.0", help_content)
    help_text.configure(state="disabled")
    
    add_log(log_box, "üöÄ AI –ü–æ—á—Ç–æ–≤–∏–∫ Pro –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!", "info")
    add_log(log_box, "‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Email, –ø–∞—Ä–æ–ª—å –∏ API –∫–ª—é—á –≤–æ –≤–∫–ª–∞–¥–∫–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'. –ù–∞–∂–º–∏—Ç–µ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ¬ª, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", "info")
    
    root.mainloop()

if __name__ == "__main__":
    main_app()
